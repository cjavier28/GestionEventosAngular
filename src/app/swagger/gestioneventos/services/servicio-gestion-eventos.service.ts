/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiServicioGestionEventosCrearPost } from '../fn/servicio-gestion-eventos/api-servicio-gestion-eventos-crear-post';
import { ApiServicioGestionEventosCrearPost$Params } from '../fn/servicio-gestion-eventos/api-servicio-gestion-eventos-crear-post';
import { apiServicioGestionEventosEditarPut } from '../fn/servicio-gestion-eventos/api-servicio-gestion-eventos-editar-put';
import { ApiServicioGestionEventosEditarPut$Params } from '../fn/servicio-gestion-eventos/api-servicio-gestion-eventos-editar-put';
import { apiServicioGestionEventosEliminarDelete } from '../fn/servicio-gestion-eventos/api-servicio-gestion-eventos-eliminar-delete';
import { ApiServicioGestionEventosEliminarDelete$Params } from '../fn/servicio-gestion-eventos/api-servicio-gestion-eventos-eliminar-delete';
import { apiServicioGestionEventosIdGet } from '../fn/servicio-gestion-eventos/api-servicio-gestion-eventos-id-get';
import { ApiServicioGestionEventosIdGet$Params } from '../fn/servicio-gestion-eventos/api-servicio-gestion-eventos-id-get';
import { apiServicioGestionEventosInscribirPost } from '../fn/servicio-gestion-eventos/api-servicio-gestion-eventos-inscribir-post';
import { ApiServicioGestionEventosInscribirPost$Params } from '../fn/servicio-gestion-eventos/api-servicio-gestion-eventos-inscribir-post';
import { apiServicioGestionEventosListarEventosGet } from '../fn/servicio-gestion-eventos/api-servicio-gestion-eventos-listar-eventos-get';
import { ApiServicioGestionEventosListarEventosGet$Params } from '../fn/servicio-gestion-eventos/api-servicio-gestion-eventos-listar-eventos-get';
import { apiServicioGestionEventosLoginPost } from '../fn/servicio-gestion-eventos/api-servicio-gestion-eventos-login-post';
import { ApiServicioGestionEventosLoginPost$Params } from '../fn/servicio-gestion-eventos/api-servicio-gestion-eventos-login-post';
import { apiServicioGestionEventosObtenerPost } from '../fn/servicio-gestion-eventos/api-servicio-gestion-eventos-obtener-post';
import { ApiServicioGestionEventosObtenerPost$Params } from '../fn/servicio-gestion-eventos/api-servicio-gestion-eventos-obtener-post';
import { GestionEventosEve } from '../models/gestion-eventos-eve';
import { InformacionEvento } from '../models/informacion-evento';

@Injectable({ providedIn: 'root' })
export class ServicioGestionEventosService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiServicioGestionEventosCrearPost()` */
  static readonly ApiServicioGestionEventosCrearPostPath = '/api/ServicioGestionEventos/crear';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiServicioGestionEventosCrearPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiServicioGestionEventosCrearPost$Response(params?: ApiServicioGestionEventosCrearPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiServicioGestionEventosCrearPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiServicioGestionEventosCrearPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiServicioGestionEventosCrearPost(params?: ApiServicioGestionEventosCrearPost$Params, context?: HttpContext): Observable<void> {
    return this.apiServicioGestionEventosCrearPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiServicioGestionEventosEditarPut()` */
  static readonly ApiServicioGestionEventosEditarPutPath = '/api/ServicioGestionEventos/editar';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiServicioGestionEventosEditarPut()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiServicioGestionEventosEditarPut$Response(params?: ApiServicioGestionEventosEditarPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiServicioGestionEventosEditarPut(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiServicioGestionEventosEditarPut$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiServicioGestionEventosEditarPut(params?: ApiServicioGestionEventosEditarPut$Params, context?: HttpContext): Observable<void> {
    return this.apiServicioGestionEventosEditarPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiServicioGestionEventosEliminarDelete()` */
  static readonly ApiServicioGestionEventosEliminarDeletePath = '/api/ServicioGestionEventos/eliminar';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiServicioGestionEventosEliminarDelete()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiServicioGestionEventosEliminarDelete$Response(params?: ApiServicioGestionEventosEliminarDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiServicioGestionEventosEliminarDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiServicioGestionEventosEliminarDelete$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiServicioGestionEventosEliminarDelete(params?: ApiServicioGestionEventosEliminarDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiServicioGestionEventosEliminarDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiServicioGestionEventosInscribirPost()` */
  static readonly ApiServicioGestionEventosInscribirPostPath = '/api/ServicioGestionEventos/inscribir';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiServicioGestionEventosInscribirPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiServicioGestionEventosInscribirPost$Response(params?: ApiServicioGestionEventosInscribirPost$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return apiServicioGestionEventosInscribirPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiServicioGestionEventosInscribirPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiServicioGestionEventosInscribirPost(params?: ApiServicioGestionEventosInscribirPost$Params, context?: HttpContext): Observable<number> {
    return this.apiServicioGestionEventosInscribirPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `apiServicioGestionEventosObtenerPost()` */
  static readonly ApiServicioGestionEventosObtenerPostPath = '/api/ServicioGestionEventos/obtener';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiServicioGestionEventosObtenerPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiServicioGestionEventosObtenerPost$Response(params?: ApiServicioGestionEventosObtenerPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<InformacionEvento>>> {
    return apiServicioGestionEventosObtenerPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiServicioGestionEventosObtenerPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiServicioGestionEventosObtenerPost(params?: ApiServicioGestionEventosObtenerPost$Params, context?: HttpContext): Observable<Array<InformacionEvento>> {
    return this.apiServicioGestionEventosObtenerPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<InformacionEvento>>): Array<InformacionEvento> => r.body)
    );
  }

  /** Path part for operation `apiServicioGestionEventosListarEventosGet()` */
  static readonly ApiServicioGestionEventosListarEventosGetPath = '/api/ServicioGestionEventos/ListarEventos';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiServicioGestionEventosListarEventosGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiServicioGestionEventosListarEventosGet$Response(params?: ApiServicioGestionEventosListarEventosGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<GestionEventosEve>>> {
    return apiServicioGestionEventosListarEventosGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiServicioGestionEventosListarEventosGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiServicioGestionEventosListarEventosGet(params?: ApiServicioGestionEventosListarEventosGet$Params, context?: HttpContext): Observable<Array<GestionEventosEve>> {
    return this.apiServicioGestionEventosListarEventosGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<GestionEventosEve>>): Array<GestionEventosEve> => r.body)
    );
  }

  /** Path part for operation `apiServicioGestionEventosLoginPost()` */
  static readonly ApiServicioGestionEventosLoginPostPath = '/api/ServicioGestionEventos/login';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiServicioGestionEventosLoginPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiServicioGestionEventosLoginPost$Response(params?: ApiServicioGestionEventosLoginPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiServicioGestionEventosLoginPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiServicioGestionEventosLoginPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiServicioGestionEventosLoginPost(params?: ApiServicioGestionEventosLoginPost$Params, context?: HttpContext): Observable<void> {
    return this.apiServicioGestionEventosLoginPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `apiServicioGestionEventosIdGet()` */
  static readonly ApiServicioGestionEventosIdGetPath = '/api/ServicioGestionEventos/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiServicioGestionEventosIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiServicioGestionEventosIdGet$Response(params: ApiServicioGestionEventosIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<GestionEventosEve>> {
    return apiServicioGestionEventosIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiServicioGestionEventosIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiServicioGestionEventosIdGet(params: ApiServicioGestionEventosIdGet$Params, context?: HttpContext): Observable<GestionEventosEve> {
    return this.apiServicioGestionEventosIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<GestionEventosEve>): GestionEventosEve => r.body)
    );
  }

}
