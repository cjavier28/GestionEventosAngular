/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiUserLoginUsuarioPost } from '../fn/user/api-user-login-usuario-post';
import { ApiUserLoginUsuarioPost$Params } from '../fn/user/api-user-login-usuario-post';
import { apiUserRegistrarusuarioPost } from '../fn/user/api-user-registrarusuario-post';
import { ApiUserRegistrarusuarioPost$Params } from '../fn/user/api-user-registrarusuario-post';
import { apiUserValidarTokenGet } from '../fn/user/api-user-validar-token-get';
import { ApiUserValidarTokenGet$Params } from '../fn/user/api-user-validar-token-get';

@Injectable({ providedIn: 'root' })
export class UserService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiUserRegistrarusuarioPost()` */
  static readonly ApiUserRegistrarusuarioPostPath = '/api/User/registrarusuario';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUserRegistrarusuarioPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUserRegistrarusuarioPost$Response(params?: ApiUserRegistrarusuarioPost$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return apiUserRegistrarusuarioPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUserRegistrarusuarioPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUserRegistrarusuarioPost(params?: ApiUserRegistrarusuarioPost$Params, context?: HttpContext): Observable<number> {
    return this.apiUserRegistrarusuarioPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `apiUserLoginUsuarioPost()` */
  static readonly ApiUserLoginUsuarioPostPath = '/api/User/LoginUsuario';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUserLoginUsuarioPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUserLoginUsuarioPost$Response(params?: ApiUserLoginUsuarioPost$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return apiUserLoginUsuarioPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUserLoginUsuarioPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUserLoginUsuarioPost(params?: ApiUserLoginUsuarioPost$Params, context?: HttpContext): Observable<string> {
    return this.apiUserLoginUsuarioPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `apiUserValidarTokenGet()` */
  static readonly ApiUserValidarTokenGetPath = '/api/User/ValidarToken';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUserValidarTokenGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserValidarTokenGet$Response(params?: ApiUserValidarTokenGet$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return apiUserValidarTokenGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUserValidarTokenGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserValidarTokenGet(params?: ApiUserValidarTokenGet$Params, context?: HttpContext): Observable<boolean> {
    return this.apiUserValidarTokenGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

}
